{"version":3,"sources":["../../../../../lib/idx/remediators/GenericRemediator/GenericRemediator.ts"],"names":["GenericRemediator","Remediator","canRemediate","remediation","action","inputs","getInputs","res","acc","input","getData","data","name","getNextStep","authClient","_context","getName","href","method","rel","accepts","produces","value","rest","length","params","step","unwrapFormValue","type"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAGO,MAAMA,iBAAN,SAAgCC,sBAAhC,CAA2C;AAChDC,EAAAA,YAAY,GAAY;AACtB;AACA,QAAI,OAAO,KAAKC,WAAL,CAAiBC,MAAxB,KAAmC,UAAvC,EAAmD;AACjD,aAAO,KAAP;AACD;;AAED,UAAMC,MAAM,GAAG,KAAKC,SAAL,EAAf;AACA,UAAMC,GAAG,GAAG,qBAAAF,MAAM,MAAN,CAAAA,MAAM,EAAQ,CAACG,GAAD,EAAMC,KAAN,KAAgB;AACxC,aAAOD,GAAG,IAAI,8BAAmBC,KAAnB,uBAA0B,IAA1B,EAAd;AACD,KAFiB,EAEf,IAFe,CAAlB;AAGA,WAAOF,GAAP;AACD;;AAEDG,EAAAA,OAAO,GAAG;AAAA;;AACR,UAAMC,IAAI,GAAG,sCAAKL,SAAL,oBAAwB,CAACE,GAAD,EAAM;AAAEI,MAAAA;AAAF,KAAN,KAAmB;AACtDJ,MAAAA,GAAG,CAACI,IAAD,CAAH,GAAY,2BAAYA,IAAZ,CAAZ;AACA,aAAOJ,GAAP;AACD,KAHY,EAGV,EAHU,CAAb;AAIA,WAAOG,IAAP;AACD;;AAEDE,EAAAA,WAAW,CAACC,UAAD,EAAgCC,QAAhC,EAAiE;AAC1E,UAAMH,IAAI,GAAG,KAAKI,OAAL,EAAb;AACA,UAAMX,MAAM,GAAG,KAAKC,SAAL,EAAf;AAEA;AACA;;AACA,UAAM;AACJ;AACAW,MAAAA,IAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,GAJI;AAKJC,MAAAA,OALI;AAMJC,MAAAA,QANI;AAOJ;AACAC,MAAAA,KARI;AASJ;AACAlB,MAAAA,MAVI;AAWJ,SAAGmB;AAXC,QAYF,KAAKpB,WAZT;AAaA;AAEA;;AACA,QAAIC,MAAJ,EAAY;AACV,aAAO,EACL,GAAGmB,IADE;AAEL,YAAI,CAAC,CAAClB,MAAM,CAACmB,MAAT,IAAmB;AAAEnB,UAAAA;AAAF,SAAvB,CAFK;AAGLD,QAAAA,MAAM,EAAE,MAAOqB,MAAP,IAAmB;AACzB,iBAAO,sBAAQX,UAAR,EAAoB;AACzBY,YAAAA,IAAI,EAAEd,IADmB;AAEzB,eAAGa;AAFsB,WAApB,CAAP;AAID;AARI,OAAP;AAUD,KAjCyE,CAmC1E;;;AACA,WAAO,EAAE,GAAG,KAAKtB;AAAV,KAAP;AAED;;AAEDG,EAAAA,SAAS,GAAY;AAAA;;AACnB,WAAO,6FAAC,KAAKH,WAAL,CAAiBmB,KAAjB,IAA0B,EAA3B,kBACG,CAAC;AAAEV,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAK,aAD1B,mBAEAe,qBAFA,mBAGAlB,KAAK,IAAI;AACZ;AACAA,MAAAA,KAAK,CAACmB,IAAN,GAAanB,KAAK,CAACmB,IAAN,IAAc,QAA3B;AACA,aAAOnB,KAAP;AACD,KAPI,CAAP;AAQD;;AAvE+C","sourcesContent":["import { IdxContext, NextStep, Input } from '../../types';\nimport { Remediator } from '../Base/Remediator';\nimport { unwrapFormValue, hasValidInputValue } from './util';\nimport { proceed } from '../../proceed';\nimport { OktaAuthInterface } from '../../../types';\n\nexport class GenericRemediator extends Remediator {\n  canRemediate(): boolean {\n    // only handle remediations that are able to submit form (xhr)\n    if (typeof this.remediation.action !== 'function') {\n      return false;\n    }\n\n    const inputs = this.getInputs();\n    const res = inputs.reduce((acc, input) => {\n      return acc && hasValidInputValue(input, this.values);\n    }, true);\n    return res;\n  }\n\n  getData() {\n    const data = this.getInputs().reduce((acc, { name }) => {\n      acc[name] = this.values[name];\n      return acc;\n    }, {});\n    return data;\n  }\n\n  getNextStep(authClient: OktaAuthInterface, _context?: IdxContext): NextStep {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    \n    /* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n    // excludes transformed fields\n    const { \n      // http metas have been transformed to action\n      href, \n      method, \n      rel, \n      accepts, \n      produces, \n      // value has been transform to inputs\n      value,\n      // will be transformed to a function that resolves IdxTransaction\n      action,\n      ...rest \n    } = this.remediation;\n    /* eslint-enable no-unused-vars, @typescript-eslint/no-unused-vars */\n\n    // step to handle form submission\n    if (action) {\n      return { \n        ...rest,\n        ...(!!inputs.length && { inputs }),\n        action: async (params?) => {\n          return proceed(authClient, {\n            step: name,\n            ...params\n          });\n        }\n      };\n    }\n\n    // return whole remediation data for other steps, eg \"redirect-idp\"\n    return { ...this.remediation } as NextStep;\n    \n  }\n\n  getInputs(): Input[] {\n    return (this.remediation.value || [])\n      .filter(({ name }) => name !== 'stateHandle')\n      .map(unwrapFormValue)\n      .map(input => {\n        // use string as default input type\n        input.type = input.type || 'string';\n        return input;\n      });\n  }\n\n}\n"],"file":"GenericRemediator.js"}