"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

exports.unwrapFormValue = unwrapFormValue;
exports.hasValidInputValue = hasValidInputValue;

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/entries"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

/* eslint-disable complexity */
function unwrapFormValue(remediation) {
  const res = {};

  for (const [key, value] of (0, _entries.default)(remediation)) {
    if (value === null || typeof value === 'undefined') {
      continue;
    }

    if (Array.isArray(value)) {
      res[key] = (0, _map.default)(value).call(value, unwrapFormValue);
    } else if (typeof value === 'object') {
      var _context, _context2;

      const formKeys = (0, _keys.default)(value); // detect patterns like:
      // value -> form -> value | form -> value

      if ((0, _includes.default)(_context = ['value', 'form']).call(_context, key) && formKeys.length === 1 && (0, _includes.default)(_context2 = ['value', 'form']).call(_context2, formKeys[0])) {
        // unwrap nested form
        const unwrappedForm = unwrapFormValue(value);
        (0, _entries.default)(unwrappedForm).forEach(([key, value]) => {
          res[key] = value;
        });
      } else {
        // dfs
        res[key] = unwrapFormValue(value);
      }
    } else {
      // handle primitive value
      res[key] = value;
    }
  }

  return res;
} // only check if value is required for now
// TODO: support SDK layer type based input validation


function hasValidInputValue(input, values) {
  const fn = (input, values, requiredTracker) => {
    const {
      name,
      value,
      required
    } = input;
    const isRequired = required || requiredTracker // TODO: confirm with backend why `required` meta is missing for authenticator remediation
    || name === 'authenticator';

    if (!isRequired) {
      return true;
    }

    if (Array.isArray(value)) {
      return (0, _reduce.default)(value).call(value, (acc, item) => {
        return acc && fn(item, values[name], isRequired);
      }, true);
    } else {
      return !!(values && values[name]);
    }
  };

  return fn(input, values, false);
}
//# sourceMappingURL=util.js.map